#!/bin/bash

while getopts 'lha:' OPTION; do
    case "$OPTION" in
        l)
            IGNORE_LOCK=1
            ;;
        ?) 
            echo "unknown option"
            exit 42
            ;;
    esac
done

if [ ! -z "$OCTO_CHAINSAW_DIR" ]
then
    cd $OCTO_CHAINSAW_DIR
fi

# always go to base dir, so we search for lock_files there and put them there
cd $(git rev-parse --show-toplevel)

if [ ! -z "$OCTO_CHAINSAW_ORIGIN" ]
then
    echo "using git origin '$OCTO_CHAINSAW_ORIGIN' to push changes"
fi

if [ -f ".octo_chainsaw_lock" ]
then
    if [ -n "$IGNORE_LOCK" ]
    then
        echo "ignoring lock"
    else
        echo ".octo_chainsaw_lock exists. Stopping."
        CODE_FROM_LOCK=$(cat .octo_chainsaw_lock)
        if [ -z "$CODE_FROM_LOCK" ]
        then
            CODE_FROM_LOCK=123
        fi
        exit "$CODE_FROM_LOCK"
    fi
fi

BRANCH_NAME=$(git symbolic-ref -q HEAD)
BRANCH_NAME=${BRANCH_NAME##refs/heads/}
BRANCH_NAME=${BRANCH_NAME:-HEAD}
# `git status --porcelain` does not output relative paths. So in case we call
# this script from somewhere else than the working tree root we need to fix
# the paths.
# Will be empty if we are allready on root.
WORK_TREE_ROOT=$(git rev-parse --show-cdup)

# turning off git quotePath so Umlauts are displayed correctly
# using read -r so escaped stuff works
git -c core.quotePath=off status --porcelain | while read -r DIRTY_LINE ;
  do
    DIRTY_FILE_NAME=$(echo $DIRTY_LINE | cut -d' ' -f2-)

    # remove surounding quotes if the exist
    DIRTY_FILE_NAME=${DIRTY_FILE_NAME%"\""}
    DIRTY_FILE_NAME=${DIRTY_FILE_NAME#"\""}

    DIRTY_FILE="${WORK_TREE_ROOT}${DIRTY_FILE_NAME}"
    
    STATUS_INDICATOR=$(echo $DIRTY_LINE | cut -d' ' -f-1)
    case $STATUS_INDICATOR in
        "??")
            CMD="add"
            LOG_ACTION="ADDED"
            ;;
        "M")
            CMD="add"
            LOG_ACTION="CHANGED"
            ;;
        "D")
            CMD="rm"
            LOG_ACTION="DELETED"
            ;;
        *)
            echo "unknown git file status $STATUS_INDICATOR"
            echo 111 > .octo_chainsaw_lock
            exit 111
            ;;
    esac
    location= eval "pwd"
    echo "running 'git $CMD $DIRTY_FILE'"
    eval "git $CMD \"$DIRTY_FILE\""
    git commit -m "[$BRANCH_NAME] $(date +"%Y-%m-%d %H:%M") $LOG_ACTION $DIRTY_FILE"
  done

#if [ -n "$(git status -s)" ]
#then
#    git add .
#    git commit -m "$BRANCH_NAME : $(date)"
#fi

if $(git merge-base --is-ancestor $BRANCH_NAME origin/$BRANCH_NAME); then
    echo "local branch is clean. Not pushing"
    exit
fi

ERROR_COUNT=$(git push $OCTO_CHAINSAW_ORIGIN --progress 2>&1 | tee /dev/tty | grep -c ERROR)

if [ "$ERROR_COUNT" -gt "0" ]
then
    echo 333 > .octo_chainsaw_lock
    exit 333
fi

